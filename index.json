[{"authors":["admin"],"categories":null,"content":"OTAKU~\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"OTAKU~","tags":null,"title":"Tong Yu","type":"authors"},{"authors":["Tong Yu"],"categories":["Paper Note - ICDE"],"content":"1. Scenario There are three types of participants in the scenario: organization, drivers and passengers.\n Organization : Organization is a company or a transportation authority that operates a dynamic taxi ridesharing service. Drivers : Taxi drivers can independently determine when to join and leave the service. Passengers : Passengers submit ride queries in real time via a mobile device  Each query indicates the origin and destination locations of the trip, as well as time windows constraining when the passenger wants to be picked up and dropped off.\nOnce receiving a new query, the organization will dispatch an \u0026ldquo;appropriate\u0026rdquo; taxi which is able to satisfy both the new query and the trips of existing passengers who are already assigned to the taxi.\n2. Motivation This paper propose a two-fold goal.\n The first goal is to investigate the potential of taxi ridesharing in serving more taxi ride queries by comparing with the case where no ridesharing is conducted. The second goal is to reduce the total travel distance of these taxis (so as to reduce the energy consumption) when doing the ridesharing.  So the problem is to build a dynamic ridesharing service applicable for the practical use, i.e. serving a large number of queries quickly. To achieve this purpose, two issues need to be addressed.\n The first issue : How to quickly search an \u0026ldquo;appropriate\u0026rdquo; taxi from a large number of candidate cars? The second issue : How to accelerate the computation of shortest paths since the shortest path calculation is usually complicated?  3. Preliminaries 3.1. Definition  Query : A query Q is a passenger’s request for a taxi ride.     Schedule : A schedule S is a temporally-ordered sequence of pickup and delivery points.     Taxi Status : A taxi status V represents the instantaneous state of a taxi.     Satisfaction : Given a taxi status V and a query Q, the paper says that V satisfies Q iff  The number of on-board passengers is smaller than the capacity of the taxi. The taxi can pickup and drop off Q and other on-board passengers without violating the time constraint.    3.2. Problem   The Dynamic Taxi Ridesharing Problem : Given a fixed number of taxis traveling on a road network and a stream of queries (i.e. a sequence of queries in ascending order of their birth time), the paper aims to serve each query in the stream by dispatching the taxi which satisfies with minimum additional incurred travel distance on the road network.\n  P.S. The paper aims to minimize the increased travel distance for each individual query. This is obviously a greedy strategy and it does not guarantee that the total travel distance of all taxis for all queries is minimized. Howerver, the problem of optimizing travel distance for all taxis for the whole query stream has been proved to be NP-complete by reducing to the Travelling Salesman Problem with Time Window.\n  3.3. Framework    4. Method 4.1. A Spatio-temporal Index of Taxis Main Idea : It needs to use the query’s time windows to filter out unsatisfactory taxis. The authors want a taxi searching process that is both fast and selects taxis wisely such that the selected taxis can satisfy the query with a reasonable small increase in travel distance over their existing schedules. If we use a pre-computed distance to approximate the distance of the shortest path, though the distance is not exact anymore, the time-consuming problem completely goes away.\n  We partition the road network using a grid. Within each grid cell, we choose the road network node which is closest to the geographical centre of the cell as the anchor node of the cell. The anchor node of a grid cell $g_{i}$ is thereafter denoted by $c_{i}$ .      We pre-compute the distance, denoted by $d_{ij}$ , and travel time, denoted by $t_{ij}$ , of the shortest path on the road network for each anchor node pair $c_{i}$ and $c_{j}$ . The distance and travel time results are saved in a matrix. The matrix is thereafter referred to as the grid distance matrix.      Now imagine that each grid cell collapses to its anchor node, that is, all the points in one cell fall to its anchor node. Then the distance between any two arbitrary points equals to the distance between two corresponding anchor nodes.\n  Each cell has some internal data structure for the purpose of taxi searching. Specifically, each grid cell $g_{i}$ maintains three lists: a temporally-ordered grid cell list $(g_{i}.l_{g}^{t})$ , a spatially-ordered grid cell list $(g_{i}.l_{g}^{d})$ , and a taxi list $(g_{i}.l_{v})$ . The spatial and temporal closeness between each pair of grid cells are measured by the values saved in the grid distance matrix.      Each taxi ID is also tagged with a timestamp $t_{a}$ indicating when the taxi will enter the grid cell. Specifically, taxi $V_{j}$ is removed from the list when $V_{j}$ leaves $g_{i}$ ; taxi $V_{k}$ is inserted into the list when $V_{j}$ is newly scheduled to enter $g_{i}$ .\n  4.2. Taxi Searching Algorithms ","date":1580793041,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580793041,"objectID":"9b75f0a4f720df2da9e9580e93f7c4c5","permalink":"/post/2020-2-4-1/","publishdate":"2020-02-04T13:10:41+08:00","relpermalink":"/post/2020-2-4-1/","section":"post","summary":"(ICDE 2013) T-Share: A Large-Scale Dynamic Taxi Ridesharing Service.","tags":["ridesharing","spatial crowdsourcing"],"title":"Paper Note - 2020/2/4","type":"post"}]