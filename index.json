[{"authors":["admin"],"categories":null,"content":"OTAKU~\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"OTAKU~","tags":null,"title":"Tong Yu","type":"authors"},{"authors":["Tong Yu"],"categories":["Paper Note - ICDE"],"content":"1. Scenario Vehicle shortage is not uncommon in popular ridesharing platforms. The shortage of vehicle disables the platform from dispatching all orders immediately, and some requesters would have to wait if their orders are pended. In practice, requesters who are anxious and not cost-sensitive, may wish to pay more to get dispatch priority.\nAn auction-based order dispatch and pricing mechanism are proposed. In this auction mechanism, the requesters(riders) act as buyers. They submit origins \u0026amp; destinations and bids to the platform server. With bids, the requesters claim the amount of money they would like to pay to take the service. The platform acts as the auctioneer, selling the shard-rides to requesters. With respect to their bids, the platform computes a dispatch, and decides the final payments of dispatched requesters.\n2. Motivation The proposed algorithms manage to maximize the overall utility of the auction, which is comprised of requesters’ utility, drivers’ utility, and platform’s utility.\n3. Preliminaries 3.1. Symbols    3.2. Entity Models  We adopt the round-based order dispatch model for our mechanism. In each round, the platform server operates on a set of pended orders and online vehicles to optimize some objectives. Wasted time : the wasted time of a dispatched requester $r_j$ is $wt_j + dt_j$  $wt_j$ : his/her waiting time during pick-up $dt_j$ : his/her detour time during delivery   Requester : a requester rj is represented by a tuple $\u0026lt;s_j,e_j,\\theta_j,val_j,bid_j\u0026gt;$  $s_j$ and $e_j$ : starting and ending geographical locations of its trip $val_j$ and $bid_j$ : $r_j$’s valuation of the service and bid to the platform respectively $\\theta_j$ : his/her maximum allowed amount of wasted time during pick-up and delivery   Vehicle : $\u0026lt;l_i,pl_i\u0026gt;$  $l_i$ : its current location $pl_i$ : its travel plan   Validity of travel plans : precedence constraint, capacity constraint, time constraint Payments to vehicles : We assume platform’s payment to a vehicle is proportional to its travel distance after it picks up the first rider. Let $rev_i$ denote the revenue of $v_i$ .  $rev_i = \\beta_d * D_i$ $\\beta_d$ : the payment to vehicle per unit travel distance $D_i$ : the travel distance of $v_i$ during delivery    3.3. Problem Formulation   Requester’s utility : $u_j = (val_j - pay_j) \\cdot x_j$\n $x_j$ equals 1 if the order of $r_j$ is dispatched, or 0 otherwise    Platform’s utility : $U_{plf} = \\sum_{r_j \\in \\hat{R}}{pay_j} - \\sum_{v_i}{rev_i}$\n $\\hat{R}$ : the set of dispatched requesters    Driver’s utility : $u_i = rev_i -\\alpha_d D_i = (\\beta_d - \\alpha_d)D_i$\n $\\alpha_d$ : measures the labor \u0026amp; fuel cost per unit travel distance    Overall utility : The utility of truthful auction in ridesharing is defined as the sum of requesters’ utilities, platform’s utility, and drivers’ utilities, i.e..     $bid_j = val_j$ because of auction truthfulness    Order dispatch problem : Given inputs of requester set $R$ and vehicle set $V$ , the order dispatch problem in auction-based ridesharing is to dispatch requesters $r_j \\in R$ to vehicles $v_i \\in V$ such that the overall utility is maximized.\n  Order pricing problem : The order pricing problem is to determine the payment for each dispatched requester such that the auction mechanism satisfies the following properties: truthfulness, individual rationality, profitability and computational efficiency.\n Truthfulness : An auction is truthful if the best strategy of any requester is to bid his/her valuation. Individual rationality : An auction is individually rational if the utility of any requester is non-negative. Profitability : An auction is profitable if the utility of the platform is non-negative. Computational efficiency : An auction is computationally efficient if the process of winner selection and payment computation can finish within polynomial time.    The order dispatch problem is NP-hard.\n4. Method 4.1. The Greedy Approach   Greedy-based order dispatch proceeds in two steps:\n Initialization : It traverses all requester-vehicle pairs to find the valid dispatches, and calculates the corresponding utilities. Valid dispatch means that $pl_i$ remains valid after accommodating $r_j$ . One-by-one dispatch : It keeps dispatching $(r_j∗, v_i∗)$ which brings the maximum utility among the remaining valid dispatches. The utility $u_{i,j}$ is calculated as $u_{i,j}=bid_j - \\alpha_d * \\Delta D_i(r_j)$ .        Order pricing for greedy dispatch      4.2. The Ranking Approach  Order Dispatch  Pack generation : For each $r_j$ , we find its nearest vehicle, $v_{r_j}$ . Then, for each $r_j$ , we find the optimal pack which contains $r_j$ and has at most $\\bar{c}$ requesters, such that dispatching this pack to one of their nearest vehicles yields the maximum utility. Pack dispatch : The packs are ranked in descending order of their utilities. Then, they are dispatched in the order of their rankings. The algorithm firstly retrieves the pack with the highest ranking, $pack_{j∗}$ among the remaining packs. Then, it dispatches $pack_{j∗}$ to its vehicle $v_{pack_{j∗}}$ . Finally, it removes the remaining packs whose requesters or vehicles are occupied by $pack_{j∗}$ . The pack dispatch process terminates when $Rank$ becomes empty.        5. Experiment Data set : Beijing, Didi.\n","date":1582355451,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582355451,"objectID":"864921d7513de7874c53029e827cc8a3","permalink":"/post/2020-2-22-1/","publishdate":"2020-02-22T15:10:51+08:00","relpermalink":"/post/2020-2-22-1/","section":"post","summary":"(ICDE 2019) Auction-Based Order Dispatch and Pricing in Ridesharing.","tags":["ridesharing","spatial crowdsourcing"],"title":"Paper Note - 2020/2/22","type":"post"},{"authors":["Tong Yu"],"categories":["Paper Note - ICDE"],"content":"1. Scenario  Ridesharing refers to a transportation scenario where travellers with similar itineraries and time schedules share a vehicle for a trip and split the travel costs such as fuel, tolls, and parking fees. When travellers need to travel to some destination, they often have several options to choose among. In such a setting, the cost and travel time of an option are important decision criteria. In the paper, it\u0026rsquo;s assumed that the destination of a vehicle is not limited and that it can accommodate any number of rider groups during a trip as long as it satisfies a capacity constraint.  2. Motivation Given a set of vehicles $C$ in the road network $G$ at a specific time and a real-time trip request set $S_{R}$ , dynamic ridesharing finds, for each trip request $R \\in S_{R}$ , all qualified and non-dominated results  $\u0026lt;c, time, price\u0026gt;$ .\n3. Preliminaries 3.1. Symbols    3.2. Definition  Ridesharing Request : A ridesharing request $R=\u0026lt;s,d,n,w,\\epsilon\u0026gt;$ on a road network $G$ is defined by a start location $s$ , a destination location $d$ , a number $n$ of riders, a maximal waiting time $w$ , and a service constraint $\\epsilon$ . Vehicle Trip Schedule : Each trip schedule $tr=\u0026lt;o_{1},o_{2},\\cdots,o_{k}\u0026gt;$ contains a sequence of locations, where $o_{1}$ is the current location $c.l$ of vehicle $c$ , and $o_{i}$ $(2 \\leq i \\leq k)$ denotes the start location or destination of an unfinished ridesharing request. Schedule Constraint : A valid trip schedule needs to satisfy the four following conditions  Capacity constraint Point order Waiting time constraint Service constraint   Price Model : For a ridesharing request $R=\u0026lt;s,d,w,n,\\epsilon\u0026gt;$ , assume that $tr_{i}$ is the current trip schedule of a vehicle $c$ and $tr_{i}$ is the new trip schedule after inserting $R$ into $tr_{i}$ , the price is computed as $f_{n} \\times (dist_{tr_{j}}-dist_{tr_{i}}+dist(s,d))$ , where $f_n$ is price ratio that depends on the number $n$ of riders.  4. Method 4.1. Index Structures 4.1.1. Road Network Indexing     If an edge $e=(u,v)$ belongs to more than one grid cell, we call $u$ and $v$ border vertices. To estimate the shortest path distance precisely, we maintain a matrix $M$ that stores the lower bound distance for every grid cell pair. Each grid cell maintains five lists :  border vertex list : border vertices belonging to the grid cell vertex list : vertices belonging to the grid cell, as each vertex $v$ is associated with its shortest path distances to the border vertices ($BV$) of the grid cell ($\\{ \u0026lt; u,dist(v,u) \u0026gt; | u \\in BV \\}$) and is also associated with $\\min \\{ dist(v,u) | u \\in BV \\} $ (denoted as $v.min$ ) grid cell list : other grid cells sorted in ascending order of the travel time from these grid cells to the grid cell. empty vehicle list : vehicles with empty ridesharing requests in $g_{i}$ non-empty vehicle list : vehicles $c_j$ with a non-empty set of ridesharing requests, i.e., vehicles $c_j$ are currently located in $g_j$ or are scheduled to enter $g_{i}$   Lower Bound Distance : Given a vertex $u$ in a grid cell $g_i$ and a vertex $v$ in a grid cell $g_j$ , if $g_i \\neq g_j$ , then the lower bound distance $ldist(u, v) = D_{ij} + u.min + v.min$ ; if $gi = gj$ , then $ldist(u, v) = 0$ . Upper Bound Distance : if $g_i \\neq g_j$ , then the upper bound distance $udist(u, v) = D_{ij} + dist(u, x_{ij}) + dist(v, y_{ij})$ ; if $g_i = g_j$ , then $udist(u, v) = \\min \\{dist(u, b) + dist(v, b) | b \\in BV \\}$ .  4.1.2. Index of Vehicle Trip Schedules  Representation of each vehicle $c$ :  the unique identifier $c.ID$ of the vehicle the current location $c.l$ of the vehicle the set $c.S$ of unfinished ridesharing requests assigned to it, sorted in ascending order of their timestamps the set $c.S_{tr}$ of all valid vehicle trip schedules   The set $c.S_{tr}$ of all valid vehicle trip schedules can be managed by a kinetic tree . Three variables are added to each node $o_x$ of the kinetic tree :  a current vehicle’s capacity the minimal detour distance allowed the trip distance disttr from $c$’s current location to $o_x$       The following global information of each grid cell $g_j$ is maintained to facilitate the pruning of a whole grid cell :  the maximum capacity : $\\max \\{ o_x.capacity | \u0026lt;o_x, o_y\u0026gt; \\in g_j \\}$ the maximal detour allowed : $\\max \\{ o_x.detour | \u0026lt;o_x, o_y\u0026gt; \\in g_j \\}$ the minimal trip distance : $dist_{tr}=\\min \\{ o_x.dist_{tr} | \u0026lt;o_x, o_y\u0026gt; \\in g_j \\}$ the maximal shortest path distance : $dist=\\max \\{ dist(o_x,o_y) | \u0026lt;o_x,o_y\u0026gt; \\in g_j \\}$    4.2. Pruning Heuristics Main Idea : Based on the designed road network and vehicle indexes, we use the lower and upper bound distances instead of the actual shortest path distances to estimate pick-up time and price for filtering.\n4.2.1. Pruning Empty Vehicles  Given a current valid result $r_i$, we try to derive :  the pruning conditions implying that the estimated result $r_j$ (i.e., the lower bound values) returned by $c_j$ is dominated by $r_i$ the pruning conditions implying that $r_j$ (i.e., the upper bound values) returned by $c_j$ dominates $r_i$   Based on the main idea, we can filter out invalid vehicles and grids.  4.2.2. Pruning Non-Empty Vehicles  Pruning for inserting start location $s$ . Pruning for inserting destination location $d$ .  4.3. Ridesharing Matching Algorithms refer to Tshare 5. Experiment experiments on effect of\n the Number of Verified Grid Cells Waiting Time Service Constraint Capacity of Vehicle Number of Vehicles Grid Cell Size the Number of Requests  ","date":1581916701,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581916701,"objectID":"91f24246d66d86d045e2f3ec04e8f2ee","permalink":"/post/2020-2-17-1/","publishdate":"2020-02-17T13:18:21+08:00","relpermalink":"/post/2020-2-17-1/","section":"post","summary":"(ICDE 2018) Price-and-Time-Aware Dynamic Ridesharing.","tags":["ridesharing","spatial crowdsourcing"],"title":"Paper Note - 2020/2/17","type":"post"},{"authors":["Tong Yu"],"categories":["Paper Note - ICDE"],"content":"1. Scenario Dynamic peer-to-peer ride sharing.\n2. Motivation This paper proposes\n a hierarchical discretization of the geographical region using grids, landmarks and clusters with theoretical guarantees an efficient in-memory indexing of rides for maintaining spatio-temporal validity within a specified error tolerance  3. System Overview      XAR requires pre-processing of the geographical region where the system will be used.\n The map-processor module in the pre-processing unit uses geographic information of the city from OpenStreetMap(OSM) to create grids and extract landmarks. Further, these landmarks are grouped together into clusters by the clustering module, using route information from OpenTripPlanner(OTP).    XAR run-time unit kicks in when the system is actually deployed.\n This unit provides functionalities like creating a ride offer in the system, finding matching rides for a request, booking seats in a matched ride and tracking rides in progress in real-time.    4. Method 4.1. Hierarchical Three-tiered Region Discretization     A grid is defined as a bounded square geographical region.  Any location is numerically mapped to a unique (implicit) grid, given its latitude and longitude. We identify a grid by its centroid, and henceforth wherever we refer to distances from a grid, these are measured with respect to the centroid of the grid.   A landmark is a point of interest in a geographical region, such as a bus stop, a mall or an important building, such that it is sufficiently far (at least a pre-specified $f$ distance away) from any other landmark.  Each landmark is associated with a set of grids, and each grid is associated with a unique landmark, that minimizes the maximum driving distance of the grid from the landmark.   A cluster is defined as a collection of landmarks, such that no pair of landmarks in a cluster are more than a specified δ driving distance away. With each grid, apart from the nearest landmark information, we additionally maintain a list of \u0026ldquo;walkable clusters\u0026rdquo;.  Walkable clusters of a grid are maintained as a list of tuples: $\u0026lt;C,w\u0026gt;$ , where $w$ is the distance of the nearest landmark in the cluster $C$ from the grid, and $w \\leq W$ , where $W$ is another system parameter defining the maximum walking distance allowed by the system.    4.2. Finding the Clusters Clusterminimization Problem : The first step is to filter the set of landmarks to ensure that no two landmarks are located too close ($\u0026lt;f$ distance, where $f$ is a system parameter) to each other, as that would defy the purpose. At the same time, every landmark should be associated with a distinct cluster, and the number of clusters stored should be minimized, as otherwise, the efficiency of search query would be affected and we want to optimize the storage required in the RAM.\n    Notations  $V$ : the set of (filtered) distinct landmarks, $|V|=n$ . $x_{i,j}$ : denote if landmark $i$ is mapped to the $j^{th}$ cluster. $m$ : the number of clusters used. $y_{j}$ : whether $j^{th}$ cluster is used.   The fourth inequality states that if two landmarks are part of the same cluster, then their pairwise distance should be at most $\\delta$ . The underlying problem setting can be represented as an unweighted graph, where landmarks are vertices, and an edge between any two vertices exist if and only if the distance between the corresponding landmarks is $\\leq \\delta$ . Now, in this unweighted graph, the problem is equivalent to partition the graph in to min number of cliques, such that every vertex is part of a clique.  4.3. Indexing Structure for Efficient Searching   entities that characterize a ride in XAR      Each cluster has a list of rides associated with it as potential rides. With each cluster $C$ , this information is maintained as a list of tuples of the form: $\u0026lt;r,t \u0026gt;$ , where $r$ denotes a ride in the system, and $t$ is the estimated time of arrival of the ride in the cluster $C$ .\n Each ride created in the system is assigned a unique ride ID. The time of arrival is estimated from historical travel times.    The main idea is that any request originating in the reachable clusters of a pass-through cluster of a ride is a potential feasible match for the ride, and this can be determined dynamically too, while the vehicle is passing through the passthrough cluster. Once we identify the pass-through cluster and their associated reachable clusters for every segment of the route of a ride, the ride gets added to the list of potential rides associated with each of these clusters, maintaining the sorted order of the lists.\n     5. Experiment  OpenStreetMap OpenTripPlanner  ","date":1581504500,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581504500,"objectID":"0773b6b993b4b1750b1468b972abcb0a","permalink":"/post/2020-2-12-1/","publishdate":"2020-02-12T18:48:20+08:00","relpermalink":"/post/2020-2-12-1/","section":"post","summary":"(ICDE 2017) Xhare-a-Ride: A Search Optimized Dynamic Ride Sharing System with Approximation Guarantee.","tags":["ridesharing","spatial crowdsourcing"],"title":"Paper Note - 2020/2/12","type":"post"},{"authors":["Tong Yu"],"categories":["Paper Note - ICDE"],"content":"1. Scenario To hire a vehicle, a passenger simply types in her/his desired pick up location and destination in the app and sends the request to the service provider, who either forwards the request to some drivers close to the pick up location, or directly schedule a close-by driver to take the order.\nHowever, there are some challenges of the problem:\n The car-hailing supply-demand varies dynamically due to different geographic locations and time intervals. The order data contains multiple attributes. These attributes together provide a wealth of information for supply-demand prediction. However, it is nontrivial how to use all the attributes in a unified model.  2. Motivation The paper\u0026rsquo;s goal is to predict the gap between the car-hailing supply and demand for a certain area in the next few minutes.\n3. Preliminaries 3.1. Definition   Spatio-temporal Processing :\n A city is divided into $N$ non-overlapping square areas $a_{1},a_{2},\\cdots,a_{N}$ . Each day is divided into 1440 timeslots(one minute for one timeslot).    Car-hailing Order :      Supply-demand Gap : For the $d$-th day, the supply-demand gap of the time interval $[t,t+C)$ in area $a$ is defined as the total amount of invalid orders in this time interval. The constant $C$ is set as 10.\n  Weather Condition :\n the weather type $wc.type$ the temperature $wc.temp$ the PM2.5 $wc.pm$    Traffic Condition : The traffic condition describes the congestion level of road segments in each area.      3.2. Problem Suppose the current date is the $d$-th day and the current time slot is $t$ . Given the past order data and the past environment data, our goal is to predict the supply-demand gap $gap^{d,t}_{a}$ for every area $a$ , i.e., the supply-demand gap in the next 10 minutes.\n3.3. Embedding Method A function $f : X \\rightarrow Y$ , satisfy two properties\n injective structure-preserving  3.4. Residual Network    4. Method 4.1. Basic Version    4.1.1. Identity Part  The identity features include the ID of area AreaID, the timeslot TimeID and the day of week (Monday, Tuesday, \u0026hellip;, Sunday) WeekID. Different areas at different time can share similar supply-demand patterns, especially when they are spatio-temporally close. The embedding method is used to reduce the feature dimensions and discover the similarities among different areas and timeslots. The Concatenate Layer takes a list of vectors as the input and simply outputs the concatenation of the vectors, denoted as $X_{id}$ .     4.1.2. Order Part   The supply-demand block can be regarded as a three layer perception, which processes the order data.\n The input layer is a real-time supply-demand vector. We then pass it through two Fully-Connected layers. The output of the supply-demand block is denoted as $X_{sd}$ .    Real-time supply-demand vector\n For a specific area $a$ , to predict the supply-demand gap $gap^{d,t}_{a}$ of the time interval $[t, t + 10)$ in the $d$-th day, we consider the order set with timestamp in $[t − L, t)$ of the $d$-th day, which we denote as $S^{d,t}$ . For a specific area $a$ , we define the real-time supply-demand vector in the $d$-th day at timeslot $t$ as $V_{sd}^{d,t}$ . $V_{sd}^{d,t}$ is a 2L-dimensional vector, which consists of two parts :  The first $L$ dimensions describe the amount of valid orders at $t-L$ in the current day. The second $L$ dimensions correspond to the invalid orders in the previous $L$ minutes.         4.1.3. Environment Part    4.2. Advanced Version  Extended Order Part     Historical supply-demand vector     Extended Supply-demand Block     5. Experiment Data set : the public dataset released by Didi in the Di-tech supply-demand prediction competition\n","date":1581334155,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581334155,"objectID":"9c383d876fb1124364ab79f6078e32b2","permalink":"/post/2020-2-10-1/","publishdate":"2020-02-10T19:29:15+08:00","relpermalink":"/post/2020-2-10-1/","section":"post","summary":"(ICDE 2017) DeepSD: Supply-Demand Prediction for Online Car-Hailing Services Using Deep Neural Networks.","tags":["ridesharing","supply-demand predicting","deep learing"],"title":"Paper Note - 2020/2/10","type":"post"},{"authors":["Tong Yu"],"categories":["Paper Note - PVLDB"],"content":"1. Scenario Each request specifies two constraints :\n Waiting Time : defining the maximal time allowed between making the request and receiving the service. Service Constraint : defining the acceptable extra detour time from the shortest possible trip duration.  When a new request is received, it is evaluated immediately for server matching and scheduling.\n2. Motivation The goal is to schedule requests in real-time and minimize the servers’ travel times to complete all committed services while meeting service guarantees.\nReal-time Ridesharing : Given a set of vehicles on the road network $G$ and a new incoming request $tr$ , find the vehicle that minimizes the overall trip cost for the augmented valid trip schedule.\n3. Preliminaries  A Road Network $G = \u0026lt;V,E,W\u0026gt;$ : consists of a vertex set $V$ and an edge set $E$. Each edge $(u,v)\\in E$ is associated with a weight $W(u,v)$ indicating the traveling cost along the edge $(u,v)$ . A Path $p$ : is a vertex sequence. A Trip Request $tr = \u0026lt;s,e,w,\\epsilon\u0026gt;$ :  $w$ : a maximal waiting time $\\epsilon$ : a service constraint, bounding the overall time from $s$ to $e$ by $(1+\\epsilon)d(s,e)$   A General Trip Schedule $S$ : trip set of size $m$ can be described in a sequence of $3m$ elements  $s_i$ : where a rider is picked up $e_i$ : where a rider is dropped off $r_i$ : where a request is received   A Valid Trip Schedule : A valid trip schedule for a trip set $TR$ satisfies three conditions:  Point order : $r_i \\rightarrow s_i \\rightarrow e_i$ Waiting time constraint : $d_{T}(r_i,s_i) \\leq w$ Service constraint : $d_{T}(s_i,e_i) \\leq (1+\\epsilon)d(s_i, e_i)$ Capacity limit   A low maintenance cost indexing method is needed to filter out servers outside the waiting time constraint.  4. Method 4.1. Kinetic Tree Approach 4.1.1. Basic Tree Structure    4.1.2. Main Idea When a server reaches a new pickup or dropoff location in the trip schedule, only those valid schedules which contain unfinished trips and share the same prefix so far (from the first pickup point of all the unfinished schedules to the current location in the trip schedule) need to be materialized. All other schedules become inactive and can be pruned from the tree.(Only a valid trip schedule can be extended to accommodate a new request.)\n4.1.3. Challenge The problem is how to determine:\n at which edge $s_k$ or $e_k$ can be inserted how to quickly prune the invalid trip schedules following that insertion  4.1.4. Inserting Pickup Location  We can perform either a depth first search (DFS) or breadth first search (BFS) starting from the root node of the tree to generate all the candidate edge $(x_i, x_{i+1})$ to insert $s_k$ . At any given point, the “active” customers can be partitioned into two sets:  $S_1$ records those customers who need to be picked up $S_2$ records the on-board customers who need to be dropped off   For the sub-tree rooted at $x_i$ , the simple way is to first generate these two sets $S_1$ and $S_2$ . Then, when we insert $s_k$ , we need to ensure each condition associated with $S_1$ and $S_2$ are also satisfied.     4.2. Hotspot Based Optimization Motivation : The main problem with the basic tree algorithm is the exponential explosion of the size of the tree when there are multiple pickup or dropoff locations close to each other.\n When we insert a pickup point $s_k$ to an edge $(x_i, x_{i+1})$ , we check if $d(x_{i+1}, s_k) \\leq \\theta$ for small $\\theta$ . If so, $s_k$ is inserted into the node of $x_{i+1}$ . $s_k$ and $x_{i+1}$ are treated as one point called a hotspot in the tree, and an arbitrary schedule is chosen between the points in a hotspot. When a hotspot contains more than one point, a newly inserted point must be within $\\theta$ to all points of the hotspot. A similar procedure can be followed for dropoff points and mixtures of pickup and dropoffs. Once a point is combined with any hotspot, we stop trying to insert it to any other edges.  5. Experiment Nothing special.\n","date":1581053107,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581053107,"objectID":"689857f4defdc677e5532287bd916843","permalink":"/post/2020-2-7-1/","publishdate":"2020-02-07T13:25:07+08:00","relpermalink":"/post/2020-2-7-1/","section":"post","summary":"(PVLDB 2014) Large Scale Real-time Ridesharing with Service Guarantee on Road Networks.","tags":["ridesharing","spatial crowdsourcing"],"title":"Paper Note - 2020/2/7","type":"post"},{"authors":["Tong Yu"],"categories":["Paper Note - IJCAI"],"content":"1. Scenario  Passenger : A person uses the cell app (or a regular phone call to a taxi company) specifying its current location, destination, and others informations such as a maximum delay that he is available to accept (the delay is in comparison with a sole taxi trip). Driver : Car owners and riders specify their origins and destinations. Car owners also indicate a maximum delay they can accept. Plateform : If a user gets a shared trip, the system must guarantee that it is cheaper than the trip where he goes alone, and that he arrives at his destination within the maximum delay specified. Based on the car gas price and consumption per kilometer, the system computes matchings between car owners and riders.  2. Motivation This paper focuses principally on the optimization problem that we call dynamic taxi sharing with time windows problem (TSTWP).\nSeveral constraints must be considered:\n the vehicle capacity the cost of a shared ride must not exceed the cost of a private ride each passenger and taxi has time window  This paper wants to maximize the number of served requests and minimize the total cost incurred to passengers, which is the same as maximize the sharing. The goals are:\n The first goal : Maximize the number of served requests. The second goal : Minimize the cost payed by the served passengers.  P.S. There is an upper bound for the second objective, by computing the cost of each trip as a private trip.\nThe hard part is\n Time : No one can arrive at its destination later than its maximum allowable time, and no one is served before its service time. Costs : A taxi passenger on a shared trip can not spend more money than on a sole trip. A car owner interested in offering rides, must receive at least as much he spend doing an alternative route, instead of his shortest path route. Safety : The system used by hitchhikers and car owners requires a previous registration. Users can specify that they only ride with friends of friends for example, using data from social networks.  3. Preliminaries 3.1. Formal Problem Definition  A graph $G = (V, E)$ : represents the map of the city. A set $N= \\{ 1,2,\\cdots,n \\}$ : reprensents $n$ taxis requests. A set $K = \\{ 2n + 1, \\cdots, 2n+ta \\}$ : represents $ta$ taxi vehicles. Each request $i \\in N$ has a source point $i$ , a destination point $i + n$ , an earliest departure time $e_{i}$ , a latest arrival time $l_{i}$ and the number of people $p_{i}$ . Each taxi vehicle $k \\in K$ has a source point $k$ , the vehicle capacity $ca_{k}$ , the start time $e_{k}$ and the end time $l_{k}$ . Every pair of vertices $i,j$ has the travel time $t_{ij}$ and the travel cost $c_{ij}$ . A taxi route is defined as a sequence of pickup and delivery points.  3.2. Objective Function $$ \\max \\sum_{k \\in K} \\sum_{i \\in N} x_{i}^{k} - \\alpha \\cfrac{C_{i}^{k}}{C_{i,i+n}} $$\n $x_{i}^{k}$ : 0 or 1, represents request $i$ is or not served by vehicle $k$ . $C_{i}^{k}$ : represents the cost payed by the request $i$ served by vehicle $k$ . $C_{i, i+n}$ : represents the cost of a private trip for request $i$ .  4. Method 4.1. Time Processing  This paper divides the day into a set of short time periods. In each period it solves a static version of the problem using the GRASP heuristic, taking into account all known requests and vehicles. The requests that were not served are added in the input of the next execution.  4.2. The GRASP Heuristic The paper proposes a greedy randomized adaptive search procedure (GRASP) to solve the static version of the TSTWP.\n In the first phase we have to compute a greedy randomized initial solution. The greedy strategy leads to good solutions and randomization is used so that different initial solutions can be constructed. In the second phase, a local search is performed in order to improve the solution found in the first phase. The GRASP metaheuristic repeats these two phases for a maximum number of iterations (or a maximum time).  4.3. Computing Initial Solutions   First of all, we initialize the route of each taxi.\n add the source point $k$ of each taxi as the first point of its route set $T_{k}^{k}$ as the maximum between $e_{k}$ and the time at the moment set $L_{k}^{k} = 0$, because the taxi driver is not counted as a passenger    In the case that some taxis may already have a route, we update and copy its route.\n  A random taxi $k$ is chosen from $K$ . Then, for all requests $i \\in N$ that were not served yet, we calculate a greedy function $\\mu_{i}^{k}$ . After that, a request $i$ is chosen randomly with probability proportional to $\\mu_{i}^{k}$ .\n  We try to insert the source and destination points of the request $i$ in the route of the taxi $k$ .\n If the insertion is feasible, we remove this request from $N$, and we update the greedy function for all remaining unserved requests in $N$ . If the insertion is unfeasible we do not try to insert this request anymore in the route of this taxi.    Then, another request is chosen in the same manner. After we tried to insert all requests, we remove $k$ from $K$ and the procedure is repeated, until $K = \\emptyset $ .\n  4.4. Greedy Function Delay Time : We define the delay time $d_{j,i}^{k}$ of a point $i$ as the amount of time that would be increased if point $i$ had been inserted after point $j$ , in the route of taxi $k$ .\n  $$d_{i,j}^{k} = \\max \\{ t_{ji}, e_{i}-T_{j}^{k} \\}$$      $$ d_{j,i+n}^{k} = \\begin{cases} t_{j,i+n}, \\text{ if } t_{j,i+n}+T_{j}^{k}\\leq l_{i} \\\\ \\infty , \\text{ otherwise} \\end{cases}$$\n  Greedy Function : $ \\mu_{i}^{k} = \\min_{j \\in R(k)}d_{j,i}^{k} + \\min_{j \\in R(k)}d_{j,i+n}^{k} $\n4.5. Local Search The local search method starts setting as the current solution an initial feasible solution, and explore new feasible solutions that are in its neighborhood. Three types of operations are proposed to obtain new solutions.\n Removal of some request from some route and attempt to insert, in this route, some request that was not served. Permutation of two requests from different routes. Permutation of two consecutive points of the same route.  At each iteration, we perform each of the three operations defined above, obtaining three new solutions. If the best of them is better than the current one, then the method sets this solution as the new current one. This procedure is repeated until there is no improvement in the current solution after a certain number of consecutive iterations, or until some maximum number of iterations is achieved.\n5. Experiment No contributions.\n","date":1580902480,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580902480,"objectID":"b7b805a6fca252aae76377d2ace5dc89","permalink":"/post/2020-2-5-1/","publishdate":"2020-02-05T19:34:40+08:00","relpermalink":"/post/2020-2-5-1/","section":"post","summary":"(IJCAI 2013) Dynamic Taxi and Ridesharing: A Framework and Heuristics for the Optimization Problem.","tags":["ridesharing","spatial crowdsourcing"],"title":"Paper Note - 2020/2/5","type":"post"},{"authors":["Tong Yu"],"categories":["Paper Note - ICDE"],"content":"1. Scenario There are three types of participants in the scenario: organization, drivers and passengers.\n Organization : Organization is a company or a transportation authority that operates a dynamic taxi ridesharing service. Drivers : Taxi drivers can independently determine when to join and leave the service. Passengers : Passengers submit ride queries in real time via a mobile device  Each query indicates the origin and destination locations of the trip, as well as time windows constraining when the passenger wants to be picked up and dropped off.\nOnce receiving a new query, the organization will dispatch an \u0026ldquo;appropriate\u0026rdquo; taxi which is able to satisfy both the new query and the trips of existing passengers who are already assigned to the taxi.\n2. Motivation This paper propose a two-fold goal.\n The first goal is to investigate the potential of taxi ridesharing in serving more taxi ride queries by comparing with the case where no ridesharing is conducted. The second goal is to reduce the total travel distance of these taxis (so as to reduce the energy consumption) when doing the ridesharing.  So the problem is to build a dynamic ridesharing service applicable for the practical use, i.e. serving a large number of queries quickly. To achieve this purpose, two issues need to be addressed.\n The first issue : How to quickly search an \u0026ldquo;appropriate\u0026rdquo; taxi from a large number of candidate cars? The second issue : How to accelerate the computation of shortest paths since the shortest path calculation is usually complicated?  3. Preliminaries 3.1. Definition  Query : A query Q is a passenger’s request for a taxi ride.     Schedule : A schedule S is a temporally-ordered sequence of pickup and delivery points.     Taxi Status : A taxi status V represents the instantaneous state of a taxi.     Satisfaction : Given a taxi status V and a query Q, the paper says that V satisfies Q iff  The number of on-board passengers is smaller than the capacity of the taxi. The taxi can pickup and drop off Q and other on-board passengers without violating the time constraint.    3.2. Problem   The Dynamic Taxi Ridesharing Problem : Given a fixed number of taxis traveling on a road network and a stream of queries (i.e. a sequence of queries in ascending order of their birth time), the paper aims to serve each query in the stream by dispatching the taxi which satisfies with minimum additional incurred travel distance on the road network.\n  P.S. The paper aims to minimize the increased travel distance for each individual query. This is obviously a greedy strategy and it does not guarantee that the total travel distance of all taxis for all queries is minimized. Howerver, the problem of optimizing travel distance for all taxis for the whole query stream has been proved to be NP-complete by reducing to the Travelling Salesman Problem with Time Window.\n  3.3. Framework    4. Method 4.1. A Spatio-temporal Index of Taxis Main Idea : It needs to use the query’s time windows to filter out unsatisfactory taxis. The authors want a taxi searching process that is both fast and selects taxis wisely such that the selected taxis can satisfy the query with a reasonable small increase in travel distance over their existing schedules. If we use a pre-computed distance to approximate the distance of the shortest path, though the distance is not exact anymore, the time-consuming problem completely goes away.\n  We partition the road network using a grid. Within each grid cell, we choose the road network node which is closest to the geographical centre of the cell as the anchor node of the cell. The anchor node of a grid cell $g_{i}$ is thereafter denoted by $c_{i}$ .      We pre-compute the distance, denoted by $d_{ij}$ , and travel time, denoted by $t_{ij}$ , of the shortest path on the road network for each anchor node pair $c_{i}$ and $c_{j}$ . The distance and travel time results are saved in a matrix. The matrix is thereafter referred to as the grid distance matrix.      Now imagine that each grid cell collapses to its anchor node, that is, all the points in one cell fall to its anchor node. Then the distance between any two arbitrary points equals to the distance between two corresponding anchor nodes.\n  Each cell has some internal data structure for the purpose of taxi searching. Specifically, each grid cell $g_{i}$ maintains three lists: a temporally-ordered grid cell list $(g_{i}.l_{g}^{t})$ , a spatially-ordered grid cell list $(g_{i}.l_{g}^{d})$ , and a taxi list $(g_{i}.l_{v})$ . The spatial and temporal closeness between each pair of grid cells are measured by the values saved in the grid distance matrix.      Each taxi ID is also tagged with a timestamp $t_{a}$ indicating when the taxi will enter the grid cell. Specifically, taxi $V_{j}$ is removed from the list when $V_{j}$ leaves $g_{i}$ ; taxi $V_{k}$ is inserted into the list when $V_{j}$ is newly scheduled to enter $g_{i}$ .\n  4.2. Taxi Searching Algorithms 4.2.1. Single-side Taxi Searching Main Idea : We use query\u0026rsquo;s late pick-up timestamp to filter out grids, then filter the possible taxis from the candidate grids.\n  Suppose a passenger commits a query $Q$ located at grid $g_{7}$ at the time of $t_{cur}$ .      Any other arbitrary grid cell is selected by the searching algorithm if and only if $$t_{i7} + t_{cur} \\leq Q.wp.l$$ $t_{i7}$ indicates the travel time from grid $g_{i}$ to grid $g_{7}$ . To quickly find all grids hold the equation above, the single-side searching algorithm simply tests all grid cells in the order-preserved list $g_{7}.l_{g}^{t}$ and finds the first grid $g_{f}$ fails to hold the equation. Then the grids before $g_{f}$ in the list $g_{7}.l_{g}^{t}$ are selected as candidate taxis.\n  For each selected grid cell $g_{s}$ , the algorithm selects taxis (in $g_{s}.l_{v}$) whose $t_{a}$ is no later than $Q.wp.l - t_{s7}$ .      Weakness : Unfortunately, this algorithm only considers taxis currently \u0026ldquo;near\u0026rdquo; the pickup point of a query (thus called single-side search). As the number of selected grid cells could be large, this algorithm may result in many taxis retrieved for the later scheduling module (therefore increasing the entire computation cost).\n4.2.2. Dual-Side Taxi Searching Main Idea : The spatio-temporal factor on the delivery point of queries also provides us with opportunities to reduce the number of grid cells to be selected. A dual-side searching algorithm is proposed as an effort for striking a balance between the distance optimality and the computation cost.\n  Suppose the deliver point is at grid $g_{2}$ . Any grid cell $g_{j}$ other than $g_{2}$ is selected by the searching algorithm at side if and only if the equation below holds, which means that any taxi currently in can enter before the late bound of the delivery window. $$t_{cur}+t_{j2} \\leq Q.wd.l$$      The algorithm mantains a set $S_{o}$ and a set $S_{d}$ to store the taxis selected from $Q.o$ and $Q.d$ side respectively.\n Initially, both and are empty. The first step in the searching is to add the taxis selected from taxi list $g_{7}.l_{v}$ to set $S_{o}$ , and add the taxis selected from taxi list $g_{2}.l_{v}$ to set $S_{d}$ . Then the algorithm calculates the intersection of $S_{o}$ and $S_{d}$ . If the intersection is not empty, the algorithm stops immediately and returns the intersection set. Otherwise, it expands the searching area by including one other grid cell at each side at a time.        4.3. Scheduling Module 4.3.1. Insertion Feasibility Check   The insertion can be separated into two stages: (i) insert the pickup point of the query $Q.o$ ; (ii) insert the delivery point of the query $Q.d$ . Among all possible ways of insertion, the system chooses the insertion way that minimally increases the travel distance.\n  An insertion feasibility check is done before an insertion:\n The passenger should be picked up before $Q.wp.l$ . Travel time delay $t_{d}$ should not result the late arrival at any point after the insertion.    The increased travel distance is calculated when both $Q.o$ and $Q.d$ are inserted successfully.      4.3.2. Lazy Shortest Path Calculation Strategy Main Idea : The paper aims to expedite the insertion process by speeding up the calculation itself instead of eliminating some insertion possibilities.\nThe calculation of shortest path is deferred or avoided by the following logic:\n If the shortest path between the origin location O and the destination location D has been previously calculated, then the algorithm simply retrieves the path from the cached results. Otherwise, instead of directly calculating the shortest path, the algorithm first calculates the lower bound of the travel time between O and D using the precomputed travel time between grid cells and the triangle inequality. Only when the lower bound does not violate time constraints, the algorithm needs to proceed to compute the shortest-time path between points O and D.  It is evident that the grid size will affect the effectiveness of lazy shortest path calculation strategy. State-of-art shortest path algorithms can be applied to speed up on-line shortest path calculations.\n5. Experiment  Measurements  Relative Distance Rate (RDR) : Define the distance of a query $Q$ as the distance between its pickup point $Q.o$ and its delivery point $Q.d$ . Denote by $D_{SQ}$ the sum of distances of queries that get satisfied and by $D_{V}$ the total distance travelled by all taxis in the ridesharing. $$RDR = D_{V}/D_{SQ}$$ Satisfaction Rate (SR) : is the fraction of queries get satisfied in the ridesharing (exclude queries that are already served by taxis at the initial state in the query counting). Number of Road Nodes Accessed Per Query (#RNAPQ) : is the number of accessed road network nodes per query. Number of Grid Cells Accessed Per Query (#GCAPQ) : is the number of accessed grid cells per query. Number of Taxis Accessed Per Query (#TAPQ) : This measurement records how many taxis per query are accessed for insertion feasibility checks by the scheduling module.    ","date":1580793041,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580793041,"objectID":"9b75f0a4f720df2da9e9580e93f7c4c5","permalink":"/post/2020-2-4-1/","publishdate":"2020-02-04T13:10:41+08:00","relpermalink":"/post/2020-2-4-1/","section":"post","summary":"(ICDE 2013) T-Share: A Large-Scale Dynamic Taxi Ridesharing Service.","tags":["ridesharing","spatial crowdsourcing"],"title":"Paper Note - 2020/2/4","type":"post"}]